Height Problem
n people are standing in a line numbered 1 to n from left to right. Each person wants to know the height of the person to left of him having height less than him. If there are multiple such people he wants to know the height of the person closest to him. If there is no such person report -1.

Input Format
line 1: contains an integer n denoting the size of array.

line 2: contains n separated integers denoting elements of array.

Output Format
The output should contain n space separated integers, the ith integer should be the height of the closest person on the left with a height less than that person (-1 if no person to the left is found whose height is less).

Example 1
Input

5
1 2 3 4 5
Output

-1 1 2 3 4
Explanation

For each index except the first, the closest person shorter than each index is immediately to their left. Hence our output is -1 1 2 3 4

Constraints
2 ≤ n ≤ 10^5

0 ≤ arr[i] ≤ 10^9

Topics
Stacks


import java.util.*;

class Accio {
    static int[] HeightProblem(int n, int[] arr) {
        int[] result = new int[n];
        Stack<Integer> stack = new Stack<>();

        for (int i = 0; i < n; i++) {
 
            while (!stack.isEmpty() && stack.peek() >= arr[i]) {
                stack.pop();
            }

         
            if (stack.isEmpty()) {
                result[i] = -1;
            } else {
                result[i] = stack.peek();
            }

            // Push the current element onto the stack
            stack.push(arr[i]);
        }

        return result;
    }
}

public class Main {
    public static void main(String[] args) throws Throwable {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; ++i) {
            arr[i] = sc.nextInt();
        }
        Accio obj = new Accio();
        int[] ans = obj.HeightProblem(n, arr);
        for (int i = 0; i < n; ++i) {
            System.out.print(ans[i] + " ");
        }
    }
}
